using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using AdventureWorks.Enterprise.Api.Middleware;
using AdventureWorks.Enterprise.Api.Tests.Infrastructure;
using System.Text;

namespace AdventureWorks.Enterprise.Api.Tests.Middleware
{
    /// <summary>
    /// Tests para el middleware de API Key
    /// </summary>
    public class ApiKeyMiddlewareTests : BaseControllerTest
    {
        private readonly Mock<IConfiguration> _mockConfiguration;
        private readonly Mock<ILogger<ApiKeyMiddleware>> _mockLogger;
        private readonly ApiKeyMiddleware _middleware;
        private readonly RequestDelegate _next;
        private bool _nextCalled;

        public ApiKeyMiddlewareTests()
        {
            _mockConfiguration = new Mock<IConfiguration>();
            _mockLogger = CreateMockLogger<ApiKeyMiddleware>();
            
            _next = (HttpContext context) =>
            {
                _nextCalled = true;
                return Task.CompletedTask;
            };

            _middleware = new ApiKeyMiddleware(_next, _mockConfiguration.Object, _mockLogger.Object);
        }

        private DefaultHttpContext CreateHttpContext(string path = "/api/test", string? apiKey = null)
        {
            var context = new DefaultHttpContext();
            context.Request.Path = path;
            context.Request.Method = "GET";
            context.Response.Body = new MemoryStream();
            
            if (!string.IsNullOrEmpty(apiKey))
            {
                context.Request.Headers.Add("X-API-Key", apiKey);
            }

            return context;
        }

        #region Tests de rutas excluidas

        [Fact]
        public async Task InvokeAsync_DeberiaPermitirAcceso_CuandoRutaEsSwagger()
        {
            // Arrange
            var context = CreateHttpContext("/swagger/index.html");
            _nextCalled = false;

            // Act
            await _middleware.InvokeAsync(context);

            // Assert
            _nextCalled.Should().BeTrue();
            context.Response.StatusCode.Should().Be(200);
        }

        [Fact]
        public async Task InvokeAsync_DeberiaPermitirAcceso_CuandoRutaNoEsApi()
        {
            // Arrange
            var context = CreateHttpContext("/home");
            _nextCalled = false;

            // Act
            await _middleware.InvokeAsync(context);

            // Assert
            _nextCalled.Should().BeTrue();
            context.Response.StatusCode.Should().Be(200);
        }

        #endregion

        #region Tests de validación de API Key

        [Fact]
        public async Task InvokeAsync_DeberiaRetornar401_CuandoApiKeyNoProporcionada()
        {
            // Arrange
            var context = CreateHttpContext("/api/test");
            _mockConfiguration.Setup(c => c["ApiSettings:ApiKey"]).Returns("test-api-key");
            _nextCalled = false;

            // Act
            await _middleware.InvokeAsync(context);

            // Assert
            _nextCalled.Should().BeFalse();
            context.Response.StatusCode.Should().Be(401);
            
            // Verificar contenido de la respuesta
            context.Response.Body.Seek(0, SeekOrigin.Begin);
            var responseBody = await new StreamReader(context.Response.Body).ReadToEndAsync();
            responseBody.Should().Contain("API Key requerida");
        }

        [Fact]
        public async Task InvokeAsync_DeberiaRetornar401_CuandoApiKeyInvalida()
        {
            // Arrange
            var context = CreateHttpContext("/api/test", "invalid-key");
            _mockConfiguration.Setup(c => c["ApiSettings:ApiKey"]).Returns("valid-api-key");
            _nextCalled = false;

            // Act
            await _middleware.InvokeAsync(context);

            // Assert
            _nextCalled.Should().BeFalse();
            context.Response.StatusCode.Should().Be(401);
            
            // Verificar contenido de la respuesta
            context.Response.Body.Seek(0, SeekOrigin.Begin);
            var responseBody = await new StreamReader(context.Response.Body).ReadToEndAsync();
            responseBody.Should().Contain("API Key inválida");
        }

        [Fact]
        public async Task InvokeAsync_DeberiaPermitirAcceso_CuandoApiKeyValida()
        {
            // Arrange
            var validApiKey = "valid-api-key";
            var context = CreateHttpContext("/api/test", validApiKey);
            _mockConfiguration.Setup(c => c["ApiSettings:ApiKey"]).Returns(validApiKey);
            _nextCalled = false;

            // Act
            await _middleware.InvokeAsync(context);

            // Assert
            _nextCalled.Should().BeTrue();
            context.Response.StatusCode.Should().Be(200);
        }

        [Fact]
        public async Task InvokeAsync_DeberiaRetornar401_CuandoApiKeyNoConfigurada()
        {
            // Arrange
            var context = CreateHttpContext("/api/test", "any-key");
            _mockConfiguration.Setup(c => c["ApiSettings:ApiKey"]).Returns((string?)null);
            _nextCalled = false;

            // Act
            await _middleware.InvokeAsync(context);

            // Assert
            _nextCalled.Should().BeFalse();
            context.Response.StatusCode.Should().Be(401);
            
            // Verificar contenido de la respuesta
            context.Response.Body.Seek(0, SeekOrigin.Begin);
            var responseBody = await new StreamReader(context.Response.Body).ReadToEndAsync();
            responseBody.Should().Contain("Configuración de API Key no válida");
        }

        #endregion

        #region Tests de logging

        [Fact]
        public async Task InvokeAsync_DeberiaLoguearWarning_CuandoApiKeyNoProporcionada()
        {
            // Arrange
            var context = CreateHttpContext("/api/test");
            _mockConfiguration.Setup(c => c["ApiSettings:ApiKey"]).Returns("test-api-key");

            // Act
            await _middleware.InvokeAsync(context);

            // Assert
            _mockLogger.Verify(
                x => x.Log(
                    LogLevel.Warning,
                    It.IsAny<EventId>(),
                    It.Is<It.IsAnyType>((v, t) => v.ToString()!.Contains("API Key no proporcionada")),
                    It.IsAny<Exception>(),
                    It.IsAny<Func<It.IsAnyType, Exception?, string>>()),
                Times.Once);
        }

        [Fact]
        public async Task InvokeAsync_DeberiaLoguearWarning_CuandoApiKeyInvalida()
        {
            // Arrange
            var context = CreateHttpContext("/api/test", "invalid-key");
            _mockConfiguration.Setup(c => c["ApiSettings:ApiKey"]).Returns("valid-api-key");

            // Act
            await _middleware.InvokeAsync(context);

            // Assert
            _mockLogger.Verify(
                x => x.Log(
                    LogLevel.Warning,
                    It.IsAny<EventId>(),
                    It.Is<It.IsAnyType>((v, t) => v.ToString()!.Contains("API Key inválida")),
                    It.IsAny<Exception>(),
                    It.IsAny<Func<It.IsAnyType, Exception?, string>>()),
                Times.Once);
        }

        [Fact]
        public async Task InvokeAsync_DeberiaLoguearInformation_CuandoApiKeyValida()
        {
            // Arrange
            var validApiKey = "valid-api-key";
            var context = CreateHttpContext("/api/test", validApiKey);
            _mockConfiguration.Setup(c => c["ApiSettings:ApiKey"]).Returns(validApiKey);

            // Act
            await _middleware.InvokeAsync(context);

            // Assert
            _mockLogger.Verify(
                x => x.Log(
                    LogLevel.Information,
                    It.IsAny<EventId>(),
                    It.Is<It.IsAnyType>((v, t) => v.ToString()!.Contains("Acceso autorizado")),
                    It.IsAny<Exception>(),
                    It.IsAny<Func<It.IsAnyType, Exception?, string>>()),
                Times.Once);
        }

        [Fact]
        public async Task InvokeAsync_DeberiaLoguearError_CuandoApiKeyNoConfigurada()
        {
            // Arrange
            var context = CreateHttpContext("/api/test", "any-key");
            _mockConfiguration.Setup(c => c["ApiSettings:ApiKey"]).Returns(string.Empty);

            // Act
            await _middleware.InvokeAsync(context);

            // Assert
            _mockLogger.Verify(
                x => x.Log(
                    LogLevel.Error,
                    It.IsAny<EventId>(),
                    It.Is<It.IsAnyType>((v, t) => v.ToString()!.Contains("API Key no configurada")),
                    It.IsAny<Exception>(),
                    It.IsAny<Func<It.IsAnyType, Exception?, string>>()),
                Times.Once);
        }

        #endregion

        #region Tests de respuesta JSON

        [Fact]
        public async Task InvokeAsync_DeberiaRetornarJsonEstructurado_CuandoAccesoNoAutorizado()
        {
            // Arrange
            var context = CreateHttpContext("/api/test");
            _mockConfiguration.Setup(c => c["ApiSettings:ApiKey"]).Returns("valid-key");

            // Act
            await _middleware.InvokeAsync(context);

            // Assert
            context.Response.StatusCode.Should().Be(401);
            context.Response.ContentType.Should().Be("application/json");
            
            // Verificar estructura JSON
            context.Response.Body.Seek(0, SeekOrigin.Begin);
            var responseBody = await new StreamReader(context.Response.Body).ReadToEndAsync();
            
            responseBody.Should().Contain("\"error\":");
            responseBody.Should().Contain("\"message\":");
            responseBody.Should().Contain("\"statusCode\": 401");
            responseBody.Should().Contain("\"timestamp\":");
            responseBody.Should().Contain("\"path\":");
            responseBody.Should().Contain("\"traceId\":");
        }

        #endregion

        #region Tests de manejo de excepciones

        [Fact]
        public async Task InvokeAsync_DeberiaCapturarExcepcion_CuandoOcurreErrorInterno()
        {
            // Arrange
            var context = CreateHttpContext("/api/test", "valid-key");
            _mockConfiguration.Setup(c => c["ApiSettings:ApiKey"]).Throws(new Exception("Test exception"));

            // Act
            await _middleware.InvokeAsync(context);

            // Assert
            context.Response.StatusCode.Should().Be(401);
            
            _mockLogger.Verify(
                x => x.Log(
                    LogLevel.Error,
                    It.IsAny<EventId>(),
                    It.Is<It.IsAnyType>((v, t) => v.ToString()!.Contains("Error durante la validación")),
                    It.IsAny<Exception>(),
                    It.IsAny<Func<It.IsAnyType, Exception?, string>>()),
                Times.Once);
        }

        #endregion

        #region Tests de casos edge

        [Theory]
        [InlineData("")]
        [InlineData(" ")]
        [InlineData("\t")]
        [InlineData("\n")]
        public async Task InvokeAsync_DeberiaRechazarApiKeysVacias(string emptyApiKey)
        {
            // Arrange
            var context = CreateHttpContext("/api/test", emptyApiKey);
            _mockConfiguration.Setup(c => c["ApiSettings:ApiKey"]).Returns("valid-key");

            // Act
            await _middleware.InvokeAsync(context);

            // Assert
            context.Response.StatusCode.Should().Be(401);
            _nextCalled.Should().BeFalse();
        }

        [Fact]
        public async Task InvokeAsync_DeberiaSerCaseSensitive_ConApiKey()
        {
            // Arrange
            var context = CreateHttpContext("/api/test", "Valid-Api-Key");
            _mockConfiguration.Setup(c => c["ApiSettings:ApiKey"]).Returns("valid-api-key");

            // Act
            await _middleware.InvokeAsync(context);

            // Assert
            context.Response.StatusCode.Should().Be(401);
            _nextCalled.Should().BeFalse();
        }

        #endregion
    }
}