using AdventureWorks.Enterprise.Api.Data;
using AdventureWorks.Enterprise.Api.Middleware;
using AdventureWorks.Enterprise.Api.Models.Configuration;
using Microsoft.EntityFrameworkCore;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddRazorPages();

// Configure ApiSettings
builder.Services.Configure<ApiSettings>(
    builder.Configuration.GetSection(ApiSettings.SectionName));

// Add Entity Framework - Using SDESICASQL connection string
builder.Services.AddDbContext<AdventureWorksDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("SDESICASQL")));

// Add API Controllers for Web API functionality
builder.Services.AddControllers();

// Add Swagger/OpenAPI
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new() { 
        Title = "AdventureWorks Enterprise API", 
        Version = "v1",
        Description = "API para el Sistema de Gestión Empresarial AdventureWorks"
    });
    
    // Configurar Swagger para requerir API Key
    c.AddSecurityDefinition("ApiKey", new Microsoft.OpenApi.Models.OpenApiSecurityScheme
    {
        In = Microsoft.OpenApi.Models.ParameterLocation.Header,
        Name = "X-API-Key",
        Type = Microsoft.OpenApi.Models.SecuritySchemeType.ApiKey,
        Description = "API Key requerida para acceder a los endpoints"
    });
    
    c.AddSecurityRequirement(new Microsoft.OpenApi.Models.OpenApiSecurityRequirement
    {
        {
            new Microsoft.OpenApi.Models.OpenApiSecurityScheme
            {
                Reference = new Microsoft.OpenApi.Models.OpenApiReference
                {
                    Type = Microsoft.OpenApi.Models.ReferenceType.SecurityScheme,
                    Id = "ApiKey"
                }
            },
            Array.Empty<string>()
        }
    });
});

// Add CORS
builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowSpecificOrigins", policy =>
    {
        policy.WithOrigins("https://localhost", "https://adventureworks.local")
              .AllowAnyHeader()
              .AllowAnyMethod()
              .AllowCredentials();
    });
});

var app = builder.Build();

// Configure the HTTP request pipeline.
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Error");
    // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
    app.UseHsts();
}
else
{
    app.UseSwagger();
    app.UseSwaggerUI(c =>
    {
        c.SwaggerEndpoint("/swagger/v1/swagger.json", "AdventureWorks Enterprise API v1");
        c.DocumentTitle = "AdventureWorks Enterprise API";
    });
}

app.UseHttpsRedirection();
app.UseStaticFiles();

// Add CORS before API Key middleware
app.UseCors("AllowSpecificOrigins");

// Add API Key Authentication Middleware - IMPORTANTE: Debe ir antes de UseRouting y UseAuthorization
app.UseApiKeyAuthentication();

app.UseRouting();

app.UseAuthorization();

app.MapRazorPages();
app.MapControllers();

// Validar configuración de API Key al iniciar
using (var scope = app.Services.CreateScope())
{
    var logger = scope.ServiceProvider.GetRequiredService<ILogger<Program>>();
    var configuration = scope.ServiceProvider.GetRequiredService<IConfiguration>();
    
    var apiKey = configuration["ApiSettings:ApiKey"];
    if (string.IsNullOrWhiteSpace(apiKey))
    {
        logger.LogError("⚠️ API Key no configurada en appsettings.json");
    }
    else if (apiKey.Length < 32)
    {
        logger.LogWarning("⚠️ API Key muy corta. Se recomienda al menos 32 caracteres");
    }
    else
    {
        logger.LogInformation("✅ API Key configurada correctamente");
    }
}

app.Run();
