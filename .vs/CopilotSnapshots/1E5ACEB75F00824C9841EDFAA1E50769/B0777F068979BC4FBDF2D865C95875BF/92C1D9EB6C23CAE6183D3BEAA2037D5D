using Microsoft.AspNetCore.Mvc;
using AdventureWorks.Enterprise.Api.Models.HumanResources;

namespace AdventureWorks.Enterprise.Api.Controllers
{
    /// <summary>
    /// Controlador para la gestión de empleados
    /// </summary>
    [ApiController]
    [Route("api/[controller]")]
    public class EmpleadosController : ControllerBase
    {
        private readonly ILogger<EmpleadosController> _logger;
        private static List<EmployeeDto> _empleados = new();

        public EmpleadosController(ILogger<EmpleadosController> logger)
        {
            _logger = logger;
        }

        /// <summary>
        /// Obtener todos los empleados
        /// </summary>
        /// <returns>Lista de empleados</returns>
        [HttpGet]
        public async Task<ActionResult<IEnumerable<EmployeeDto>>> ObtenerEmpleados()
        {
            try
            {
                _logger.LogInformation("Obteniendo todos los empleados en {Timestamp}", DateTime.UtcNow);
                return Ok(_empleados);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error al obtener los empleados");
                return StatusCode(500, "Ocurrió un error al procesar su solicitud");
            }
        }

        /// <summary>
        /// Obtener empleado por ID
        /// </summary>
        /// <param name="id">ID del empleado</param>
        /// <returns>Detalles del empleado</returns>
        [HttpGet("{id}")]
        public async Task<ActionResult<EmployeeDto>> ObtenerEmpleado(int id)
        {
            try
            {
                _logger.LogInformation("Obteniendo empleado {EmpleadoId} en {Timestamp}", id, DateTime.UtcNow);
                
                var empleado = _empleados.FirstOrDefault(e => e.BusinessEntityID == id);
                if (empleado == null)
                {
                    _logger.LogWarning("Empleado {EmpleadoId} no encontrado", id);
                    return NotFound($"Empleado con ID {id} no encontrado");
                }

                return Ok(empleado);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error al obtener el empleado {EmpleadoId}", id);
                return StatusCode(500, "Ocurrió un error al procesar su solicitud");
            }
        }

        /// <summary>
        /// Crear un nuevo empleado
        /// </summary>
        /// <param name="empleado">Datos del empleado</param>
        /// <returns>Empleado creado</returns>
        [HttpPost]
        public async Task<ActionResult<EmployeeDto>> CrearEmpleado([FromBody] EmployeeDto empleado)
        {
            try
            {
                if (!ModelState.IsValid)
                {
                    _logger.LogWarning("Estado del modelo inválido para crear empleado");
                    return BadRequest(ModelState);
                }

                empleado.BusinessEntityID = _empleados.Count > 0 ? _empleados.Max(e => e.BusinessEntityID) + 1 : 1;
                empleado.RowGuid = Guid.NewGuid();
                empleado.ModifiedDate = DateTime.UtcNow;

                _empleados.Add(empleado);
                
                _logger.LogInformation("Empleado {EmpleadoId} creado en {Timestamp}", empleado.BusinessEntityID, DateTime.UtcNow);
                
                return CreatedAtAction(nameof(ObtenerEmpleado), new { id = empleado.BusinessEntityID }, empleado);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error al crear el empleado");
                return StatusCode(500, "Ocurrió un error al procesar su solicitud");
            }
        }

        /// <summary>
        /// Actualizar un empleado existente
        /// </summary>
        /// <param name="id">ID del empleado</param>
        /// <param name="empleado">Datos actualizados del empleado</param>
        /// <returns>Sin contenido si es exitoso</returns>
        [HttpPut("{id}")]
        public async Task<IActionResult> ActualizarEmpleado(int id, [FromBody] EmployeeDto empleado)
        {
            try
            {
                if (!ModelState.IsValid)
                {
                    _logger.LogWarning("Estado del modelo inválido para actualizar empleado {EmpleadoId}", id);
                    return BadRequest(ModelState);
                }

                var empleadoExistente = _empleados.FirstOrDefault(e => e.BusinessEntityID == id);
                if (empleadoExistente == null)
                {
                    _logger.LogWarning("Empleado {EmpleadoId} no encontrado para actualizar", id);
                    return NotFound($"Empleado con ID {id} no encontrado");
                }

                // Actualizar propiedades
                empleadoExistente.NationalIDNumber = empleado.NationalIDNumber;
                empleadoExistente.LoginID = empleado.LoginID;
                empleadoExistente.JobTitle = empleado.JobTitle;
                empleadoExistente.BirthDate = empleado.BirthDate;
                empleadoExistente.MaritalStatus = empleado.MaritalStatus;
                empleadoExistente.Gender = empleado.Gender;
                empleadoExistente.HireDate = empleado.HireDate;
                empleadoExistente.SalariedFlag = empleado.SalariedFlag;
                empleadoExistente.VacationHours = empleado.VacationHours;
                empleadoExistente.SickLeaveHours = empleado.SickLeaveHours;
                empleadoExistente.CurrentFlag = empleado.CurrentFlag;
                empleadoExistente.ModifiedDate = DateTime.UtcNow;

                _logger.LogInformation("Empleado {EmpleadoId} actualizado en {Timestamp}", id, DateTime.UtcNow);
                
                return NoContent();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error al actualizar el empleado {EmpleadoId}", id);
                return StatusCode(500, "Ocurrió un error al procesar su solicitud");
            }
        }

        /// <summary>
        /// Eliminar un empleado
        /// </summary>
        /// <param name="id">ID del empleado</param>
        /// <returns>Sin contenido si es exitoso</returns>
        [HttpDelete("{id}")]
        public async Task<IActionResult> EliminarEmpleado(int id)
        {
            try
            {
                var empleado = _empleados.FirstOrDefault(e => e.BusinessEntityID == id);
                if (empleado == null)
                {
                    _logger.LogWarning("Empleado {EmpleadoId} no encontrado para eliminar", id);
                    return NotFound($"Empleado con ID {id} no encontrado");
                }

                _empleados.Remove(empleado);
                
                _logger.LogInformation("Empleado {EmpleadoId} eliminado en {Timestamp}", id, DateTime.UtcNow);
                
                return NoContent();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error al eliminar el empleado {EmpleadoId}", id);
                return StatusCode(500, "Ocurrió un error al procesar su solicitud");
            }
        }
    }
}